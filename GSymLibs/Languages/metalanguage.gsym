(
	(@gsym withInternalMetaLanguage @ml
		(@ml content
			(
				(@ml displayDefinition metaLanguageDisplay metaLanguage
					($where
						(
							($# "View special expressions for a compiler definition")
							(@viewCompilerSpecial
								($lambda (@node)
								)
							)

							($# "View special expressions for a view definition")
							(@viewViewSpecial
								($lambda (@node)
								)
							)
							
							($# "View a comment")
							(@viewComment
								($lambda (@comment)
									($activeBorder ($label ("#" + @comment)))
								)
							)
							
							($# "View a where binding; factory dependent on special function")
							(@viewWhereBindingFactory
								($lambda (@viewSpecial)
									($lambda (@node)
										($match @node
											( ($# (: @comment !))
												(@viewComment <-> @comment)
											)
										
											( ((: @varName !) (: @expression ^))
												($activeBorder ($hbox ($list ($label @varName) ($label "=") ($viewEval @expression (@viewExpressionFactory <-> @viewSpecial)))))
											)
										)
									)
								)
							)

							($# "View a lambda parameter")
							(@viewLambdaParam
								($lambda (@node)
									($activeBorder ($label @node))
								)
							)
							
							($# "View a lambda parameter list")
							(@viewLambdaParamList
								($lambda (@node)
									($activeBorder
										($hbox ((($list ($label "("))  +  ($mapViewEval @node @viewLambdaParam))  +  ($list ($label ")"))))
									)
								)
							)
							
							($# "View a match pattern")
							(@viewMatchPattern
								($lambda (@node)
									($match @node
										( !!
											($activeBorder ($label "!"))
										)
										
										( //
											($activeBorder ($label "(..)"))
										)
										
										( ^^
											($activeBorder ($label "^"))
										)
										
										( **
											($activeBorder ($label "..*"))
										)

										( ++
											($activeBorder ($label "..+"))
										)
										
										( (: @constantValue !)
											($activeBorder ($label @constantValue))
										)
										
										( (-- (: @min !) (: @max !))
											($activeBorder ($label (((".." + @min) + "-") + @max)))
										)
										
										( (:: (: @varName !) (: @subPattern ^))
											($activeBorder ($hbox ($list ($label @varName) ($label ":") ($viewEval @subPattern @viewMatchPattern))))
										)
										
										( (: @listPattern /)
											($activeBorder ($hbox ((($list ($label "(")) + ($mapViewEval @listPattern @viewMatchPattern)) + ($list ($label ")"))) ) )
										)
									)
								)
							)

							($# "View a match pair; factory dependent on special function")
							(@viewMatchPairFactory
								($lambda (@viewSpecial)
									($lambda (@node)
										($match @node
											( ($# (: @comment !))
												(@viewComment <-> @comment)
											)
										
											(  ((: @pattern ^) (: @expressions *))
												($activeBorder ($hbox ($list ($viewEval @pattern @viewMatchPattern) ($label ":") ($vbox ($mapViewEval @expressions (@viewExpressionFactory <-> @viewSpecial)) ))))
											)
										)
									)
								)
							)

							($# "View an expression; factory dependent on special function")
							(@viewExpressionFactory
								($lambda (@viewSpecial)
									($lambda (@node)
										($match @node
											( (: @stringValue !)
												($activeBorder ($label @stringValue))
											)
											
											( ()
												($activeBorder ($label "None"))
											)

											( ($# @comment)
												(@viewComment <-> @comment)
											)
											
											( ($list (: @elements *))
												($activeBorder
													($hbox ((($list ($label "["))  +  ($mapViewEval @elements (@viewExpressionFactory <-> @viewSpecial)))  +  ($list ($label "]"))))
												)
											)

											( ($set (: @elements *))
												($activeBorder
													($hbox ((($list ($label "SET("))  +  ($mapViewEval @elements (@viewExpressionFactory <-> @viewSpecial)))  +  ($list ($label ")"))))
												)
											)

											( ($where (: @bindings /) (: @expressions *))
												($activeBorder
													($vbox
														((($list ($label "WHERE"))  +
														 ($mapViewEval @bindings (@viewWhereBindingFactory <-> @viewSpecial)))  +
														 ($list ($hbox ($list ($label "=") ($vbox ($mapViewEval @expressions (@viewExpressionFactory <-> @viewSpecial)))))))
													)
												)
											)
											
											( ($lambda (: @params /) (: @expressions *))
												($activeBorder
													($vbox (($list
														($hbox ($list ($label u"\u03bb") ($viewEval @params @viewLambdaParamList) ($label "=") ) )
														)  +  ($mapViewEval @expressions (@viewExpressionFactory <-> @viewSpecial)))
													)
												)
											)

											( ($match (: @expression ^) (: @matchPairs *))
												($activeBorder
													($vbox (($list
														($hbox ($list ($label "MATCH") ($viewEval @expression (@viewExpressionFactory <-> @viewSpecial)) ($label ":") ) )
														)  +  ($mapViewEval @matchPairs (@viewMatchPairFactory <-> @viewSpecial)))
													)
												)
											)
											
											( ((: @x ^))   ((@viewExpressionFactory <-> @viewSpecial) <-> @x) )

											( (: @x ^)  (@log <-> (@gLispAsString <-> @x)) ($activeBorder ($label "<ERROR>")) )
										)
									)
								)
							)
							
							($# "View an language definition subtree")
							(@viewDefinitionNode
								($lambda (@node)
									($match @node
										( (! compilerDefinition (: @name !) (: @sourceFormat !) (: @targetFormat !) (: @specification *))
											(
												($activeBorder
													($vbox (($list
														($hbox ($list ($label "Compiler definition") ($label @name) ($label @sourceFormat) ($label "To:") ($label @targetFormat)))
														)  +  ($mapViewEval @specification (@viewExpressionFactory <-> @viewCompilerSpecial)))
													)
												)
											)
										)
										( (! displayDefinition (: @name !) (: @format !) (: @specification *))
											(
												($activeBorder
													($vbox (($list
														($hbox ($list ($label "View definition") ($label @name) ($label "For:") ($label @format)))
														)  +  ($mapViewEval @specification (@viewExpressionFactory <-> @viewViewSpecial)))
													)
												)
											)
										)
									)
								)
							)
							
							($# "View an language definition")
							(@viewLanguageNode
								($lambda (@node)
									($activeBorder ($vbox ($mapViewEval @node @viewDefinitionNode)))
								)
							)
						)
						@viewLanguageNode
					)
				)
			)
		)
	)
)
