(
	(@gsym withInternalMetaLanguage @ml
		(@ml content
			(
				(@ml displayDefinition metaLanguageDisplay metaLanguage
					($where
						(
							($# "View special expressions for a compiler definition")
							(@viewCompilerSpecial
								($lambda (@node)
									($match @node
										($# "Unknown")
										( (: @x ^)  (@log <- (@gLispAsString <- @x)) ($activeBorder ($label "#'#SPECIAL-ERROR#")) )
									)
								)
							)

							($# "View special expressions for a view definition")
							(@viewViewSpecial
								($lambda (@node)
									($match @node
										($# "View eval, no factory")
										( ($viewEval (: @x ^))
											($activeBorder ($hbox ($list ($label "#'ViewEval(") ($viewEval @x (@viewExpressionFactory <- @viewViewSpecial)) ($label "#')"))))
										)
										
										($# "View eval, with factory")
										( ($viewEval (: @x ^) (: @fac ^))
											($activeBorder ($hbox ($list ($label "#'ViewEval(") ($viewEval @x (@viewExpressionFactory <- @viewViewSpecial)) ($label "#'WITH") ($viewEval @fac (@viewExpressionFactory <- @viewViewSpecial)) ($label "#')"))))
										)
										
										($# "Map View eval, no factory")
										( ($mapViewEval (: @x ^))
											($activeBorder ($hbox ($list ($label "#'MapViewEval(") ($viewEval @x (@viewExpressionFactory <- @viewViewSpecial)) ($label "#')"))))
										)
										
										($# "Map View eval, with factory")
										( ($mapViewEval (: @x ^) (: @fac ^))
											($activeBorder ($hbox ($list ($label "#'MapViewEval(") ($viewEval @x (@viewExpressionFactory <- @viewViewSpecial)) ($label "#'WITH") ($viewEval @fac (@viewExpressionFactory <- @viewViewSpecial)) ($label "#')"))))
										)
										
										($# "Active border")
										( ($activeBorder (: @x ^))
											($activeBorder ($hbox ($list ($label "#'ActiveBorder(") ($viewEval @x (@viewExpressionFactory <- @viewViewSpecial)) ($label "#')"))))
										)
										
										($# "Label")
										( ($label (: @x ^))
											($activeBorder ($hbox ($list ($label "#'Label(") ($viewEval @x (@viewExpressionFactory <- @viewViewSpecial)) ($label "#')"))))
										)
										
										($# "Entry")
										( ($entry (: @x ^))
											($activeBorder ($hbox ($list ($label "#'Entry(") ($viewEval @x (@viewExpressionFactory <- @viewViewSpecial)) ($label "#')"))))
										)
										
										($# "HBox")
										( ($hbox (: @x ^))
											($activeBorder
												($vbox ($list
													($label "#'HBox")
													($viewEval @x (@viewExpressionFactory <- @viewViewSpecial))
												))
											)
										)
										
										($# "VBox")
										( ($vbox (: @x ^))
											($activeBorder
												($vbox ($list
													($label "#'VBox")
													($viewEval @x (@viewExpressionFactory <- @viewViewSpecial))
												))
											)
										)

										($# "Script")
										( ($script (: @main ^) (: @lsuper ^) (: @lsub ^) (: @rsuper ^) (: @rsub ^))
											($activeBorder
												($vbox ($list
													($label "#'Script")
													($script
														($viewEval @main (@viewExpressionFactory <- @viewViewSpecial))
														($viewEval @lsuper (@viewExpressionFactory <- @viewViewSpecial))
														($viewEval @lsub (@viewExpressionFactory <- @viewViewSpecial))
														($viewEval @rsuper (@viewExpressionFactory <- @viewViewSpecial))
														($viewEval @rsub (@viewExpressionFactory <- @viewViewSpecial))
													)
												))
											)
										)
										
										($# "Script left superscript")
										( ($scriptLSuper (: @main ^) (: @scriptChild ^))
											($activeBorder
												($vbox ($list
													($label "#'Script - left super")
													($scriptLSuper
														($viewEval @main (@viewExpressionFactory <- @viewViewSpecial))
														($viewEval @scriptChild (@viewExpressionFactory <- @viewViewSpecial))
													)
												))
											)
										)
										
										($# "Script left subscript")
										( ($scriptLSub (: @main ^) (: @scriptChild ^))
											($activeBorder
												($vbox ($list
													($label "#'Script - left sub")
													($scriptLSub
														($viewEval @main (@viewExpressionFactory <- @viewViewSpecial))
														($viewEval @scriptChild (@viewExpressionFactory <- @viewViewSpecial))
													)
												))
											)
										)
										
										($# "Script right superscript")
										( ($scriptRSuper (: @main ^) (: @scriptChild ^))
											($activeBorder
												($vbox ($list
													($label "#'Script - right super")
													($scriptRSuper
														($viewEval @main (@viewExpressionFactory <- @viewViewSpecial))
														($viewEval @scriptChild (@viewExpressionFactory <- @viewViewSpecial))
													)
												))
											)
										)
										
										($# "Script right subscript")
										( ($scriptRSub (: @main ^) (: @scriptChild ^))
											($activeBorder
												($vbox ($list
													($label "#'Script - right sub")
													($scriptRSub
														($viewEval @main (@viewExpressionFactory <- @viewViewSpecial))
														($viewEval @scriptChild (@viewExpressionFactory <- @viewViewSpecial))
													)
												))
											)
										)
										
										($# "Unknown")
										( (: @x ^)  (@log <- (@gLispAsString <- @x)) ($activeBorder ($label "#'SPECIAL-ERROR>")) )
									)
								)
							)
							
							($# "View a comment")
							(@viewComment
								($lambda (@comment)
									($activeBorder ($label ("#'#" + @comment)))
								)
							)
							
							($# "View a where binding; factory dependent on special function")
							(@viewWhereBindingFactory
								($lambda (@viewSpecial)
									($lambda (@node)
										($match @node
											( ($# (: @comment !))
												(@viewComment <- @comment)
											)
										
											( ((: @varName !) (: @expression ^))
												($activeBorder ($hbox ($list ($label @varName) ($label "#'=") ($viewEval @expression (@viewExpressionFactory <- @viewSpecial)))))
											)
										)
									)
								)
							)

							($# "View a lambda parameter")
							(@viewLambdaParam
								($lambda (@node)
									($activeBorder ($label @node))
								)
							)
							
							($# "View a lambda parameter list")
							(@viewLambdaParamList
								($lambda (@node)
									($activeBorder
										($hbox ((($list ($label "#'("))  +  ($mapViewEval @node @viewLambdaParam))  +  ($list ($label "#')"))))
									)
								)
							)
							
							($# "View a match pattern")
							(@viewMatchPatternFactory
								($lambda (@viewSpecial)
									($lambda (@node)
										($match @node
											($# "Any non-list")
											( !!
												($activeBorder ($label "#'!"))
											)
											
											($# "Any list")
											( //
												($activeBorder ($label "#'(..)"))
											)
											
											($# "Anything")
											( ^^
												($activeBorder ($label "#'^"))
											)
											
											($# "List internal 0+")
											( **
												($activeBorder ($scriptRSuper ($label "#'..") ($label "#'*")))
											)
	
											($# "List internal 1+")
											( ++
												($activeBorder ($scriptRSuper ($label "#'..") ($label "#'+")))
											)
											
											($# "Constant")
											( (: @constantValue !)
												($activeBorder ($label @constantValue))
											)
											
											($# "List internal min to max")
											( (-- (: @min !) (: @max !))
												($activeBorder ($scriptRSuper ($label "#'..") ($label ((@min + "#'-") + @max))))
											)
											
											($# "Bind")
											( (:: (: @varName !) (: @subPattern ^))
												($activeBorder ($scriptLSub ($viewEval @subPattern (@viewMatchPatternFactory <- @viewSpecial)) ($label (@varName [:] #1 #None))))
											)
											
											($# "Condition")
											( (?? (: @varName !) (: @conditionExpr ^) (: @subPattern ^))
												($activeBorder
													($scriptRSub
														($viewEval @subPattern (@viewMatchPatternFactory <- @viewSpecial))
														($hbox
															($list
																($label "#'?(") ($label (@varName [:] #1 #None)) ($label "#') =")
																($viewEval @conditionExpr (@viewExpressionFactory <- @viewSpecial))
															)
														)
													)
												)
											)
											
											($# "List pattern")
											( (: @listPattern /)
												($activeBorder ($hbox ((($list ($label "#'[")) + ($mapViewEval @listPattern (@viewMatchPatternFactory <- @viewSpecial))) + ($list ($label "#']"))) ) )
											)
										)
									)
								)
							)

							($# "View a match pair; factory dependent on special function")
							(@viewMatchPairFactory
								($lambda (@viewSpecial)
									($lambda (@node)
										($match @node
											( ($# (: @comment !))
												(@viewComment <- @comment)
											)
										
											(  ((: @pattern ^) (: @expressions *))
												($activeBorder ($hbox ($list ($viewEval @pattern (@viewMatchPatternFactory <- @viewSpecial)) ($label "#':") ($vbox ($mapViewEval @expressions (@viewExpressionFactory <- @viewSpecial)) ))))
											)
										)
									)
								)
							)

							($# "View an expression; factory dependent on special function")
							(@viewExpressionFactory
								($lambda (@viewSpecial)
									($lambda (@node)
										($match @node
											($# "Variable access")
											( (? @x (@x startswith "#'@") (: @varName !))
												($activeBorder ($label (@varName [:] #1 #None)))
											)
											
											($# "String literal")
											( (? @x (@x startswith "#'#'") (: @stringValue !))
												($activeBorder ($label (("#'\"" + (@stringValue [:] #2 #None)) + "#'\"")))
											)
											
											($# "Literal")
											( (: @literalValue !)
												($activeBorder ($label (@literalValue [:] #1 #None)))
											)
											
											($# "Empty list")
											( ()
												($activeBorder ($label "#'None"))
											)

											($# "Comment")
											( ($# @comment)
												(@viewComment <- @comment)
											)
											
											($# "List literal")
											( ($list (: @elements *))
												($activeBorder
													($hbox ((($list ($label "#'["))  +  ($mapViewEval @elements (@viewExpressionFactory <- @viewSpecial)))  +  ($list ($label "#']"))))
												)
											)

											($# "Set literal")
											( ($set (: @elements *))
												($activeBorder
													($hbox ((($list ($label "#'SET("))  +  ($mapViewEval @elements (@viewExpressionFactory <- @viewSpecial)))  +  ($list ($label "#')"))))
												)
											)

											($# "Where expression")
											( ($where (: @bindings /) (: @expressions *))
												($activeBorder
													($vbox
														((($list ($label "#'WHERE"))  +
														 ($mapViewEval @bindings (@viewWhereBindingFactory <- @viewSpecial)))  +
														 ($list ($hbox ($list ($label "#'=") ($vbox ($mapViewEval @expressions (@viewExpressionFactory <- @viewSpecial)))))))
													)
												)
											)
											
											($# "Lambda expression, with 0 or 1 expressions")
											( ($lambda (: @params /) (: @expressions *))
												($activeBorder
													($hbox (($list
														($hbox ($list ($label u"#'\u03bb") ($viewEval @params @viewLambdaParamList) ($label "#'=") ) )
														)  +  ($mapViewEval @expressions (@viewExpressionFactory <- @viewSpecial)))
													)
												)
											)

											($# "Lambda expression 2 or more expressions")
											( ($lambda (: @params /) (: @expressions (- #2 #None)))
												($activeBorder
													($vbox (($list
														($hbox ($list ($label u"#'\u03bb") ($viewEval @params @viewLambdaParamList) ($label "#'=") ) )
														)  +  ($mapViewEval @expressions (@viewExpressionFactory <- @viewSpecial)))
													)
												)
											)

											($# "Pattern match expression")
											( ($match (: @expression ^) (: @matchPairs *))
												($activeBorder
													($vbox (($list
														($hbox ($list ($label "#'MATCH") ($viewEval @expression (@viewExpressionFactory <- @viewSpecial)) ($label "#':") ) )
														)  +  ($mapViewEval @matchPairs (@viewMatchPairFactory <- @viewSpecial)))
													)
												)
											)
											
											($# "Single element list")
											( ((: @x ^))   ((@viewExpressionFactory <- @viewSpecial) <- @x) )
											
											($# "Special")
											( (: @s((? @x (@x startswith "#'$") !) *))
												(@viewSpecial <- @s)
											)
											
											($# "Get attribute")
											( ( (: @a ^) . (: @attr !) )
												($activeBorder
													($hbox ($list ($viewEval @a (@viewExpressionFactory <- @viewSpecial)) ($label "#'.") ($label @attr)))
												)
											)

											($# "Get item")
											( ( (: @a ^) [] (: @key !) )
												($activeBorder
													($hbox ($list ($viewEval @a (@viewExpressionFactory <- @viewSpecial)) ($label "#'[") ($viewEval @key (@viewExpressionFactory <- @viewSpecial)) ($label "#']")))
												)
											)

											($# "Get slice")
											( ( (: @a ^) [:] (: @start !) (: @stop !))
												($activeBorder
													($hbox ($list
														($viewEval @a (@viewExpressionFactory <- @viewSpecial))
														($label "#'[")
														($viewEval @start (@viewExpressionFactory <- @viewSpecial))
														($label "#':")
														($viewEval @stop (@viewExpressionFactory <- @viewSpecial))
														($label "#']")
													))
												)
											)

											($# "Addition")
											( ( (: @a ^) "++" (: @b ^) )
												($activeBorder
													($hbox ($list ($viewEval @a (@viewExpressionFactory <- @viewSpecial)) ($label "#'+") ($viewEval @b (@viewExpressionFactory <- @viewSpecial))))
												)
											)

											($# "Call")
											( ( (: @a ^) "<-" (: @params *) )
												($activeBorder
													($hbox
														((($list ($viewEval @a (@viewExpressionFactory <- @viewSpecial)) ($label "#'("))  +  ($mapViewEval @params (@viewExpressionFactory <- @viewSpecial))) +
															($list ($label "#')")))
													)
												)
											)

											($# "Method call")
											( ( (: @a ^) (: @methodName !) (: @params *) )
												($activeBorder
													($hbox
														((($list ($viewEval @a (@viewExpressionFactory <- @viewSpecial)) ($label "#'.") ($label @methodName) ($label "#'("))  +  ($mapViewEval @params (@viewExpressionFactory <- @viewSpecial))) +
															($list ($label "#')")))
													)
												)
											)

											($# "Unknown")
											( (: @x ^)  (@log <- (@gLispAsString <- @x)) ($activeBorder ($label "#'<ERROR>")) )
										)
									)
								)
							)
							
							($# "View an language definition subtree")
							(@viewDefinitionNode
								($lambda (@node)
									($match @node
										( (! compilerDefinition (: @name !) (: @sourceFormat !) (: @targetFormat !) (: @specification *))
											(
												($activeBorder
													($vbox (($list
														($hbox ($list ($label "#'Compiler definition") ($label @name) ($label @sourceFormat) ($label "#'To:") ($label @targetFormat)))
														)  +  ($mapViewEval @specification (@viewExpressionFactory <- @viewCompilerSpecial)))
													)
												)
											)
										)
										( (! displayDefinition (: @name !) (: @format !) (: @specification *))
											(
												($activeBorder
													($vbox (($list
														($hbox ($list ($label "#'View definition") ($label @name) ($label "#'For:") ($label @format)))
														)  +  ($mapViewEval @specification (@viewExpressionFactory <- @viewViewSpecial)))
													)
												)
											)
										)
									)
								)
							)
							
							($# "View an language definition")
							(@viewLanguageNode
								($lambda (@node)
									($activeBorder ($vbox ($mapViewEval @node @viewDefinitionNode)))
								)
							)
						)
						@viewLanguageNode
					)
				)
			)
		)
	)
)
