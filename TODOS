TODOS:



- Computer Language Design:
  A Tutorial on Behavioral Reflection and its Implementation
  http://www2.parc.com/csl/groups/sda/projects/reflection96/docs/malenfant/ref96/ref96.html

- Add sub-match to match

- Problem: How to maintain structure
  Eg. (add (loadLocal x) (loadLocal y))
  What if (loadLocal y) is deleted?
  A good solution is to replace it with (nilExpr), rather than simply deleting the entry, in order to retain the structure
  The current system is very low-level.
  A higher level system may be required; delete/remove shouldn't simply do this; it should be the responsibility of the parent
  node to decide *how* a child is deleted (so that it can replace it, etc).
  
- Select; we need a way of specifying which node should be selected after a modification

- Queueing events needs to be handled
   - select events must occur before remaining token events



- The GLisp compiler should generate memoised lambdas; it is used in the viewIfPairFactory lambda

- The following talk by Guy Steele gives information on language design that could be very useful
    http://video.google.com/videoplay?docid=-8860158196198824415&q=guy+steele&total=977&start=0&num=10&so=0&type=search&plindex=0

- Use the following presentation on unicode in Python to check gSym over:
    http://farmdev.com/talks/unicode/

- Literate programming style
  1. Define document structure and presentation in another document; a meta-document
  2. The gMeta language should be written as a literate document itself.
  3. The first thing that gSym loads is a view definition of gMeta. Since gMeta is a literate document, gSym will
      have no idea how to find the code that is the gMeta view definition.
  4. The document structure definition must describe how to execute the parts of a document that provide services
      to other documents, and to other parts of the document itself.
  5. Proposal: '$boot' form; gSym should look for a '$boot' form and execute this. This will establish the necessary
      code for executing the gMeta literate document in order to find the gMeta view definition, and the document
      structure view definition, and set these up.
  6. With this in place, the gMeta literate document will be able to be executed and viewed.
  7. PROBLEM: assume that there is one page of the document that collects all the gMeta code together so it can be
      compiled. Various pages throughout the document reference *parts* of this code so that it can be displayed in
      well presented pages. What if a page references part of a where expression (e.g. one bindig) or part of a match
      expression (e.g. a pattern - expression pair)? This poses the problem of how view state is handled.
- For editing languages 'live'; use the smalltalk-ish multiple worlds idea; use one world to edit a hosted world
- Implement web-browser style user interface - urls, tabbed browsing
- Typesetting:
     - Add baseline alignment to DTWrappedHBox
     - Provide different hboxes in the view code; an aligned one, and an unaligned one
- Check out the Psyco optimiser, since it works on Linux and Windows.
- GSym will screw up if the system attempts to render two views of the same document node:
     The pattern matcher matches a pattern
     binds one subtree to @a, the other to @b
     ($viewEval @a)
     ($viewEval @b)
     ($viewEval @a)
     Would cause an error, as the second view of @a would cause it to try to recreate the view of @a
- Generate debug information for compiled code
- Handle debug information
- GLisp (compiled to Python) code can generate bad data; check the sanity before processing it
- Ensure that the build contents function can return a DVNode; if it does not generate a widget, this causes an error,
since this widget is passed straight through to the node above/outside


HANDLE/CORRECT THE FOLLOWING ERRORS IN THE VIEW:
if the view function directly returns the result of a $viewEval; a DTWidget is expected, a DVNode causes a crash


POSSIBLE COLLABORATION:

Links to information on SAGE, the CAS (computer algebra system) written in Python.
The author may be interested in the interactive typesetting system in gSym.
William Stein; University of Washington
http://lambda-the-ultimate.org/node/2288


The Role of Programming; Gerald Jay Sussman
Sussman is workin on consistent and machine-useable notations for physics.
May be some interest in interactive typesetting.
http://video.google.com/videoplay?docid=-2726904509434151616

	
	

CURSOR HANDLING SYSTEM STATUS:
The cursor handling currently uses the focus system, rather than an ever-present cursor.
It is now handled by the presentation toolkit, rather than by the document view.


ALTERNATE CURSOR MANAGEMENT SYSTEM:
Implement cursor location methods for:
- DTHLine
- DTScript
- DTWrappedHBox
- DTWrappedHBoxWithSeparators
Test cursor location methods for:
- DTBox
- DTEntry




