gSym ideas log:
	
	
Current plans:
	
Currently in separate phases.
Live documents.




Future plans:

02/Mar/2008
Discovered the STEPS project, run by Alan Kay.
Looking into OMeta; the meta-language that combines pattern matching with object-orientation
with a view to describing languages.


03/Mar/2008
The following Photoshop tutorial contains information on creating a Vista-inspired menu.
http://psdtuts.com/interface-tutorials/how-to-create-a-stunning-vista-inspired-menu/
And the same in SVG:
http://my.opera.com/MacDev_ed/blog/2008/02/05/how-to-do-photoshop-like-effects-in-svg


07/Mar/2008
Unicode supports Greek characters; useful for mathematics.
GTK/cairo supports unicode characters.
The DTLabel test code uses the python source:
u"\u03bb"
To display the lambda character.
http://www.unicode.org   and   http://www.unicode.org/charts
contain information on using unicode to get these characters.


04/Apr/2008
Inverse Parser: somewhat similar to what I am developing.
http://en.wikipedia.org/wiki/Inverse_parser


06/Apr/2008
Considering a combined typesetting-parser system.
Parser Expression Grammars are easy to implement, and the Packrat parser system makes them fast (O(n)).
They can be extended so that left-recursive grammars can be handled.
The memo table in the parser would be very useful, as it would be trivial to extend a packrat parser to make an incremental parser.
This extension would need to be applied to the left-recursion extensions.
Each rule-application would have markers that would indicate the start and end of the range of text parsed by this rule.
Similar to the OMeta language in the VPRI system, the grammar language / meta language would include:
1) production rules.
2) AST generation rules.
3) View hints on how to typeset the text that makes up this part of the source.




22/Apr/2008
Interaction models:
There are three possible interaction models:

1) Classic
The classic interaction model is composed of the underlying AST data model, and a user interface that edits this
directly. This was the interaction model used in prototype 1. It has a number of problems. It has been difficult
to make this interaction model function reliably, due to the way in which user interface widgets are created and
destroyed, and therefore grab/ungrab/gain/lose focus.
Copy and paste is a big problem here. Often the meaning of an AST node is dependent on what it is contained in,
meaning that if a node is pasted 'out of context' it will not be rendered correctly; probably completely differently.
This will result in a very bad user experience.
+ conceptually simple
+ absolute freedom to define layout and interaction
- huge amount of R&D to get a system with a good user experience

2) Parser
This interaction model uses a parser and serialiser specification to provide a way of converting the underlying
AST data model to text, and parse it back to an AST again. The AST is converted to text. An incremental parser
converts this into a parse tree. The grammar is annoted with view/edit information, which tells gSym how the UI
should divide the text into segments, and how to style and display this text. This system would maintain an
editable version of the document as a text stream. A cursor marker would keep track of the cursor position.
This would eliminate the problem caused by maintaining the focus target correctly that occurs in the classic
system.
Navigation in this system would be much easier to implement than that of the classic system. Copy and paste
would be the same as with a regular text editor, as it would be up to the parser to re-introduce structure.
When editing a document, the edit operations may bring the document into a syntactically incorrect state. Due
to the fact that the parser will no longer handle the document
+ very similar to what already exists
+ user input almost always handled sensibly
- requires grammar design; this could be difficult for a complex language, or language in development, even
  when left-recursive parser expression grammars are used
- all text interaction must go through the parser, so must be specified in the grammar
- requires R&D to develop language and technique to derive AST -> text from parser specification
- loses styling when the document state becomes syntactically incorrect
+ Edit on a line-by-line basis

3) Markup
The interaction model converts the AST into text delimited and separated by markup tags. These tags are not
text tags such as those in XML or HTML. The stream is composed of a list of objects. Each object is either
text context, a start tag, and end tag, or a general/separator tag. These tags are named by the language
specification. Their names/identifiers allow start tags to be matched with end tags. This significantly
simplifies parsing, as well as speeding it up (This would be a major concern with a parser written in Python,
given a large document to parse).
A styling system similar to CSS would allow the language specification to determine how the content
inside/between specific tags would be viewed and edited.
This has the advantage that when the document is brought into an inconsistent (incorrect) state via edit
operations, the styling remains.
Problems could exist with how a user would be able to recreate specific tags. This problem does not exist
the the parser system, since the symbols available on the keyboard are sufficient. An example is the python
tuple/function call use of parentheses. The markup system would use different tags for the two different
types of parenthesis, perhaps rendering them in a different colour to differentiate them from one another.
How do we let the user enter the closing tag? When the user enters a close-paren, which tag does the user
desire?
+ simpler to implement than the parser system
+ does not require grammar/ast conversion
+ performance likely to be better due to not having to parse the whole document
+ document maintains style at all times during editing
- could suffer from the same problems as word processors regarding user unfriendlyness
- problems with how we interpret user input
Problems and solutions:
  - How do we determine what to apply an operation to? The classic system maintains a 'focus range' which
     can cover a range of the document, so that when (for example) a binary operator is applied, it is applied
     to this range of the document. The markup system maintains only a cursor.
  + We use a precedence system. When applying an operator, we look at the current location of the cursor;
     see which tags it is between. We place our new operator tags *outside* any tags with a higher precedence.

4) List editing
Instead of using a markup style system, edit 'lists'.
E.g. Display complex nodes (in other words, not literals) as lists e.g. A + B.
Lists can have limited lengths, such as binary operators which are limited to 2 children.
They can have delimiters and separators.
They can determine how they are joined with other lists.
When joining two items that cannot correctly be joined:
e.g. A + B *| C    (the | represents the cursor)
the user backspaces deleting the *.
B and C have to be joined. There is no good way of doing this, so we
need an 'invalid join' list.

The incremental computation system will continuously destroy and rebuild GUI elements.
We need a way of ensuring that the cursor is persistent.





14/June/2008
Python bindings for LLVM
http://mdevan.nfshost.com/llvm-py.html
These bindings would be very helpful for creating compilers.



20/June/2008
- Literate programming style
    1. Define document structure and presentation in another document; a meta-document
    2. The gMeta language should be written as a literate document itself.
    3. The first thing that gSym loads is a view definition of gMeta. Since gMeta is a literate document, gSym will
        have no idea how to find the code that is the gMeta view definition.
    4. The document structure definition must describe how to execute the parts of a document that provide services
        to other documents, and to other parts of the document itself.
    5. Proposal: '$boot' form; gSym should look for a '$boot' form and execute this. This will establish the necessary
        code for executing the gMeta literate document in order to find the gMeta view definition, and the document
        structure view definition, and set these up.
    6. With this in place, the gMeta literate document will be able to be executed and viewed.
    7. PROBLEM: assume that there is one page of the document that collects all the gMeta code together so it can be
        compiled. Various pages throughout the document reference *parts* of this code so that it can be displayed in
        well presented pages. What if a page references part of a where expression (e.g. one bindig) or part of a match
        expression (e.g. a pattern - expression pair)? This poses the problem of how view state is handled.

        
        
21/June/2008
- For editing languages 'live'; use the smalltalk-ish multiple worlds idea; use one world to edit a hosted world
- Implement web-browser style user interface - urls, tabbed browsing
- The following talk by Guy Steele gives information on language design that could be very useful
    http://video.google.com/videoplay?docid=-8860158196198824415&q=guy+steele&total=977&start=0&num=10&so=0&type=search&plindex=0




29/Nov/2008
Gregor Kiczales worked on Intentional Programming. He is at the University of British Columbia.
http://www.cs.ubc.ca/~gregor/




07/Jan/2009
Design of Lenses, for projection.
Due to performance considerations, the a lens will maintain two documents, one which is the source document, the other
which is the projected document, called S and P.
Two lens functions are supplied, f, and fInv. They transform a node from a document (Ns is a source document node, Np is a
projected document node) in one direction. f transforms Ns to Np, and fInv transforms Np to Ns.
A lens function must:
    - transform a node or return a copy of the node
    - a lens function is defined as:
        function(subtreeFunction, fallbackFunction, node) -> node'
            subtreeFunction - should be applied to subtree nodes; subtreeFunction()   (subtreeFunction will have values for subtreeFunction and fallbackFunction bound, it will also deal with update stuff)
            fallbackFunction - when function cannot handle a node, it should be passed to fallbackFunction; fallBackFunction(node)   (fallBackFunction will have values for subtreeFunction and its own
                    fallback bound)
            node - the node to transform
    
        
    
09/Jan/2009
On presenting code aside its documentation in an easy to read form.
http://www.toolness.com/wp/?p=441



12/Jan/2009
Multi-touch GUIs
Problem: The Jeff Han photo album demo; how to have one photo held down by a hand, at the same time as the other hand 'drags' the viewport, thereby moving
the workspace contents independent of the photo.
Dumb solution: Use some special interaction system to work out how to move the photo across the workspace, as the workspace moves underneath it.
Better solution: When the user touches a photo, remove the constraints that pin the photo to the workspace, and replace them with constraints pinning it
to the screen. Allow the user to move the photo. When the user lets go, remove the screen constraints, and replace with workspace constraints; move it
from one 'space' to another.


27/Jan/2009
Smalltalk-esque system; some kind of live editor
Perhaps an alternative style of Python editor.
A gSym language definition editor.


31/Jan/2009
Several upcoming Java technologies worth watching:
http://www.javaworld.com/javaworld/jw-01-2009/jw-01-client-side-roundtable.html
- JWebPane: replacement for JEditorPane which uses Webkit to render HTML
- MigLayout: UI Layout engine based that uses a DSL


31/Jan/2009
GWT (Google Web Toolkit) allows you to write Java client side code which is translated into Javascript.
A RPC system allows you to call server methods from the client.


31/Jan/2009
SWT (Eclipse UI) has a Browser widget that embeds Gecko in Java. Javascript and Java can call one another.
