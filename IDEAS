gSym ideas log:
	
	
Current plans:
	
Currently in separate phases.
Live documents.




Future plans:

02/Mar/2008
Discovered the STEPS project, run by Alan Kay.
Looking into OMeta; the meta-language that combines pattern matching with object-orientation
with a view to describing languages.


03/Mar/2008
The following Photoshop tutorial contains information on creating a Vista-inspired menu.
http://psdtuts.com/interface-tutorials/how-to-create-a-stunning-vista-inspired-menu/
And the same in SVG:
http://my.opera.com/MacDev_ed/blog/2008/02/05/how-to-do-photoshop-like-effects-in-svg


05/Mar/2008
Considering how to edit a gSym structured document.
Realised a possible link with Geoffrey Bantle's Blender Mesh system;
his system uses primitive/atomic mesh edit operations;
- make vertex, destroy vertex
  make edge, destroy edge, split edge create vertex, merge edges destroy vertex
  make face, destroy face, split face create edge, merge faces destroy edge
A similar system of atomic edits to lists could help in gSym:
- add child x
- remove child x
- replace child x with y
- split list
- merge lists
- insert range i:j
- remove range i:j


07/Mar/2008
Unicode supports Greek characters; useful for mathematics.
GTK/cairo supports unicode characters.
The DTLabel test code uses the python source:
u"\u03bb"
To display the lambda character.
http://www.unicode.org   and   http://www.unicode.org/charts
contain information on using unicode to get these characters.


04/Apr/2008
Need a way of ensuring the data is maintained in a sane state:
For example, take a binary operator; addition
(add (loadLocal x) (loadLocal y))     VALID
(add (loadLocal x) (nilExpr))     VALID
(add (loadLocal x))      INVALID
Other more complicated structures could be for example a Python define statement:
(def name (params...) (body...))
We need a way of maintain the structure in a valid state, and correct it should it stray into
an invalid one.


04/Apr/2008
Inverse Parser: somewhat similar to what I am developing.
http://en.wikipedia.org/wiki/Inverse_parser


06/Apr/2008
Considering a combined typesetting-parser system.
Parser Expression Grammars are easy to implement, and the Packrat parser system makes them fast (O(n)).
They can be extended so that left-recursive grammars can be handled.
The memo table in the parser would be very useful, as it would be trivial to extend a packrat parser to make an incremental parser.
This extension would need to be applied to the left-recursion extensions.
Each rule-application would have markers that would indicate the start and end of the range of text parsed by this rule.
Similar to the OMeta language in the VPRI system, the grammar language / meta language would include:
1) production rules.
2) AST generation rules.
3) View hints on how to typeset the text that makes up this part of the source.


